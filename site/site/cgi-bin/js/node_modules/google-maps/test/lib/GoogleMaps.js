// Generated by CoffeeScript 1.8.0
(function() {
  var baseUrl, cb;

  baseUrl = GoogleMapsLoader.URL;

  cb = GoogleMapsLoader.WINDOW_CALLBACK_NAME;

  describe('GoogleMaps', function() {
    afterEach(function(done) {
      return GoogleMapsLoader.release(function() {
        return done();
      });
    });
    describe('#load()', function() {
      it('should throw an error if promise style is used', function() {
        return expect(function() {
          return GoogleMapsLoader.load().then();
        }).to["throw"](Error, 'Using promises is not supported anymore. Please take a look in new documentation and use callback instead.');
      });
      it('should load google api object', function(done) {
        return GoogleMapsLoader.load(function(google) {
          expect(google).to.be.a('object');
          expect(google).to.have.keys(['maps']);
          return done();
        });
      });
      return it('should load google api only for first time and then use stored object', function(done) {
        var count;
        count = 0;
        GoogleMapsLoader.onLoad(function() {
          return count++;
        });
        GoogleMapsLoader.load();
        GoogleMapsLoader.load();
        GoogleMapsLoader.load();
        return GoogleMapsLoader.load(function() {
          expect(count).to.be.equal(1);
          return done();
        });
      });
    });
    describe('#release()', function() {
      return it('should restore google maps package to original state and remove google api object completely and load it again', function(done) {
        return GoogleMapsLoader.load(function() {
          return GoogleMapsLoader.release(function() {
            expect(GoogleMapsLoader.google).to.be["null"];
            expect(window.google).to.be.undefined;
            return GoogleMapsLoader.load(function(google) {
              expect(google).to.be.a('object');
              expect(google).to.have.keys(['maps']);
              return done();
            });
          });
        });
      });
    });
    return describe('#createUrl()', function() {
      it('should create url with sensor support', function() {
        GoogleMapsLoader.SENSOR = true;
        return expect(GoogleMapsLoader.createUrl()).to.be.equal(baseUrl + '?sensor=true&callback=' + cb);
      });
      it('should create url without sensor support', function() {
        GoogleMapsLoader.SENSOR = false;
        return expect(GoogleMapsLoader.createUrl()).to.be.equal(baseUrl + '?sensor=false&callback=' + cb);
      });
      it('should create url with key', function() {
        GoogleMapsLoader.KEY = 'abcdefghijkl';
        return expect(GoogleMapsLoader.createUrl()).to.be.equal(baseUrl + '?sensor=false&key=abcdefghijkl&callback=' + cb);
      });
      it('should create url with one library', function() {
        GoogleMapsLoader.LIBRARIES = ['hello'];
        return expect(GoogleMapsLoader.createUrl()).to.be.equal(baseUrl + '?sensor=false&libraries=hello&callback=' + cb);
      });
      it('should create url with more libraries', function() {
        GoogleMapsLoader.LIBRARIES = ['hello', 'day'];
        return expect(GoogleMapsLoader.createUrl()).to.be.equal(baseUrl + '?sensor=false&libraries=hello,day&callback=' + cb);
      });
      return it('should create url with client and version', function() {
        GoogleMapsLoader.CLIENT = 'buf';
        GoogleMapsLoader.VERSION = '999';
        return expect(GoogleMapsLoader.createUrl()).to.be.equal(baseUrl + '?sensor=false&client=buf&v=999&callback=' + cb);
      });
    });
  });

}).call(this);
